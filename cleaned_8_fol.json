[
    {
        "conclusion": "Some people who are healthy and exercise regularly live long lives.",
        "conclusion_FOL": "∃x (Healthy(x) ∧ ExercisesRegularly(x) ∧ LongLife(x)) ::: There exists someone who is healthy, exercises regularly and lives a long life.",
        "premises": [
            "All people are either healthy or not healthy.",
            "People who eat healthy food are healthy.",
            "Healthy people exercise regularly.",
            "People who get enough sleep are healthy.",
            "People with good genes are healthy.",
            "If a person smokes, they are not healthy.",
            "If a person drinks alcohol excessively, they are not healthy.",
            "If a person is happy, they are healthy.",
            "People who have good friends are happy.",
            "People who get regular checkups are healthy.",
            "If a person eats unhealthy food, they are not healthy.",
            "If a person is stressed, they are not healthy.",
            "If a person avoids stress, they are healthy.",
            "People who follow doctor's advice are healthy.",
            "People who exercise regularly live long lives.",
            "Some people are healthy."
        ],
        "premises_FOL": [
            "∀x (Person(x) → (Healthy(x) ∨ ¬Healthy(x))) ::: All people are either healthy or not healthy.",
            "∀x (EatsHealthyFood(x) → Healthy(x)) ::: People who eat healthy food are healthy.",
            "∀x (Healthy(x) → ExercisesRegularly(x)) ::: Healthy people exercise regularly.",
            "∀x (GetsEnoughSleep(x) → Healthy(x)) ::: People who get enough sleep are healthy.",
            "∀x (HasGoodGenes(x) → Healthy(x)) ::: People with good genes are healthy.",
            "∀x (Smokes(x) → ¬Healthy(x)) ::: If a person smokes, they are not healthy.",
            "∀x (DrinksAlcExcess(x) → ¬Healthy(x)) ::: If a person drinks alcohol excessively, they are not healthy.",
            "∀x (IsHappy(x) → Healthy(x)) ::: If a person is happy, they are healthy.",
            "∀x (HasGoodFriends(x) → IsHappy(x)) ::: People who have good friends are happy.",
            "∀x (GetsRegularCheckups(x) → Healthy(x)) ::: People who get regular checkups are healthy.",
            "∀x (EatsUnhealthyFood(x) → ¬Healthy(x)) ::: If a person eats unhealthy food, they are not healthy.",
            "∀x (IsStressed(x) → ¬Healthy(x)) ::: If a person is stressed, they are not healthy.",
            "∀x (AvoidsStress(x) → Healthy(x)) ::: If a person avoids stress, they are healthy.",
            "∀x (FollowsDoctorsAdvice(x) → Healthy(x)) ::: People who follow doctor's advice are healthy.",
            "∀x (ExercisesRegularly(x) → LongLife(x)) ::: People who exercise regularly live long lives.", 
            "∀x (Healthy(x) → LongLife(x)) ::: People who are healthy live long lives.", 
            "∃x Healthy(x) ::: Some people are healthy."
        ],
        "predicates": [
            "Person(x) ::: x is a person.",
            "Healthy(x) ::: x is healthy.",
            "ExercisesRegularly(x) ::: x exercises regularly.",
            "LongLife(x) ::: x lives a long life.",
            "EatsHealthyFood(x) ::: x eats healthy food.",
            "GetsEnoughSleep(x) ::: x gets enough sleep.",
            "HasGoodGenes(x) ::: x has good genes.",
            "Smokes(x) ::: x smokes.",
            "DrinksAlcExcess(x) ::: x drinks alcohol excessively.",
            "IsHappy(x) ::: x is happy.",
            "HasGoodFriends(x) ::: x has good friends.",
            "GetsRegularCheckups(x) ::: x gets regular checkups.",
            "EatsUnhealthyFood(x) ::: x eats unhealthy food.",
            "IsStressed(x) ::: x is stressed.",
            "AvoidsStress(x) ::: x avoids stress.",
            "FollowsDoctorsAdvice(x) ::: x follows the doctor's advice."
        ]
    },
    {
        "conclusion": "Some scientists who publish papers and secure funding collaborate.",
        "conclusion_FOL": "∃x (Scientist(x) ∧ PublishesPapers(x) ∧ SecuresFunding(x) ∧ Collaborates(x)) ::: There exists a scientist who publishes papers, secures funding and collaborates.",
        "premises": [
            "All scientists publish papers.",
            "Scientists who conduct research need equipment.",
            "Scientists who publish papers attend conferences.",
            "Those who attend conferences present results.",
            "Scientists with mentors get help.",
            "Mentors help scientists secure funding.",
            "Scientists who present results receive grants.",
            "Scientists who receive grants share data.",
            "Scientists who share data with others collaborate.",
            "Scientists who secure funding use a lab.",
            "Scientists who use a lab need support.",
            "Scientists who secure funding work on a project.",
            "Some scientists conduct research.",
            "If a scientist publishes papers, they finds interesting topics.",
            "If a scientist works on a project, they collaborate."
        ],
        "premises_FOL": [
            "∀x (Scientist(x) → PublishesPapers(x)) ::: All scientists publish papers.",
            "∀x (ConductsResearch(x) → NeedsEquipment(x)) ::: Scientists who conduct research need equipment.",
            "∀x (PublishesPapers(x) → AttendsConferences(x)) ::: Scientists who publish papers attend conferences.",
            "∀x (AttendsConferences(x) → PresentsResults(x)) ::: Those who attend conferences present results.",
            "∀x (HasMentors(x, y) → MentorsHelp(y, x)) ::: Scientists with mentors get help.",
            "∀x ∀y (MentorsHelp(x, y) → SecuresFunding(y)) ::: Mentors help scientists secure funding.",
            "∀x (PresentsResults(x) → ReceivesGrants(x)) ::: Scientists who present results receive grants.",
            "∃y (SharesData(x, y)) ::: Scientist x who receive grants share data shares data with y.",
            "∀x (SharesData(x, y) → Collaborates(x)) ::: Scientists who share data with others collaborate.",
            "∀x (SecuresFunding(x) → UsesLab(x)) ::: Scientists who secure funding use a lab.",
            "∀x (UsesLab(x) → NeedsSupport(x)) ::: Scientists who use a lab need support.",
            "∃y (SecuresFunding(x) → WorksOnProject(x, y)) ::: Scientist s who secure funding work on a project y.",
            "∃x ConductsResearch(x) ::: Some scientists conduct research.",
            "∀x (PublishesPapers(x) → FindsInterestingTopics(x)) ::: If a scientist publishes papers, they finds interesting topics.",
            "∀x ∀y (WorksOnProject(x, y) → Collaborates(x)) ::: If a scientist works on a project, they collaborate."
        ],
        "predicates": [
            "Scientist(x) ::: x is a scientist.",
            "PublishesPapers(x) ::: x publishes papers.",
            "SecuresFunding(x) ::: x secures funding.",
            "Collaborates(x) ::: x collaborates.",
            "ConductsResearch(x) ::: x conducts research.",
            "NeedsEquipment(x) ::: x needs equipment.",
            "AttendsConferences(x) ::: x attends conferences.",
            "PresentsResults(x) ::: x presents results.",
            "HasMentors(x, y) ::: x has mentor y.",
            "MentorsHelp(x, y) ::: mentor x helps y.",
            "ReceivesGrants(x) ::: x receives grants.",
            "SharesData(x, y) ::: x shares data with y.",
            "UsesLab(x) ::: x uses lab.",
            "NeedsSupport(x) ::: x needs support.",
            "FindsInterestingTopics(x) ::: x finds interesting topics.",
            "WorksOnProject(x, y) ::: x works on project y."
        ]
    },
    {
        "conclusion": "Some people who are leaders, have a good vision, and inspire others achieve great things.", 
        "conclusion_FOL": "∃x (Leader(x) ∧ GoodVision(x) ∧ InspiresOthers(x) ∧ AchievesGreatThings(x)) ::: There exists someone who is a leader, has a good vision, inspires others and achieves great things.",
        "premises": [
            "All leaders have a good vision.",
            "People with a good vision inspire others.",
            "People who inspire others motivate their team.",
            "Leaders set goals.",
            "People who communicate effectively build relationships.",
            "People who make decisions understand people.",
            "Leaders are confident.",
            "People who take risks overcome challenges.",
            "People who learn from mistakes are leaders.",
            "People who follow rules help others.",
            "Those who have integrity are leaders.",
            "Leaders who motivate their team achieve great things.",
            "If a person sets goals and builds relationships, they are leaders.",
            "If a person has a good vision and communicates effectively, they are leaders.",
            "Some people are leaders.",
            "If a person is confident and takes risks, they inspire others.",
            "If a person overcomes challenges, they achieve great things.",
            "Leaders must have integrity."
        ],
        "premises_FOL": [
            "∀x (Leader(x) → GoodVision(x)) ::: All leaders have a good vision.",
            "∀x (GoodVision(x) → InspiresOthers(x)) ::: People with a good vision inspire others.",
            "∀x (InspiresOthers(x) → MotivatesTeam(x)) ::: People who inspire others motivate their team.",
            "∀x (Leader(x) → SetsGoals(x)) ::: Leaders set goals.",
            "∀x (CommunicatesEffectively(x) → BuildsRelationships(x)) ::: People who communicate effectively build relationships.",
            "∀x (MakesDecisions(x) → UnderstandsPeople(x)) ::: People who make decisions understand people.",
            "∀x (Leader(x) → IsConfident(x)) ::: Leaders are confident.",
            "∀x (TakesRisks(x) → OvercomesChallenges(x)) ::: People who take risks overcome challenges.",
            "∀x (LearnsFromMistakes(x) → Leader(x)) ::: People who learn from mistakes are leaders.",
            "∀x (FollowsRules(x) → HelpsOthers(x)) ::: People who follow rules help others.",
            "∀x (Leader(x) ∧ MotivatesTeam(x) → AchievesGreatThings(x)) ::: Leaders who motivate their team achieve great things.",
            "∀x (SetsGoals(x) ∧ BuildsRelationships(x) → Leader(x)) ::: If a person sets goals and builds relationships, they are leaders.",
            "∀x (GoodVision(x) ∧ CommunicatesEffectively(x) → Leader(x)) ::: If a person has a good vision and communicates effectively, they are leaders.",
            "∃x Leader(x) ::: Some people are leaders.",
            "∀x (IsConfident(x) ∧ TakesRisks(x) → InspiresOthers(x)) ::: If a person is confident and takes risks, they inspire others.",
            "∀x (OvercomesChallenges(x) → AchievesGreatThings(x)) ::: If a person overcomes challenges, they achieve great things.",
            "∀x (Leader(x) → HasIntegrity(x)) ::: Leaders must have integrity."
        ],
        "predicates": [
            "Person(x) ::: x is a person.",
            "Leader(x) ::: x is a leader.",
            "GoodVision(x) ::: x has a good vision.",
            "InspiresOthers(x) ::: x inspires others.",
            "AchievesGreatThings(x) ::: x achieves great things.",
            "MotivatesTeam(x) ::: x motivates a team.",
            "SetsGoals(x) ::: x sets goals.",
            "CommunicatesEffectively(x) ::: x communicates effectively.",
            "BuildsRelationships(x) ::: x builds relationships.",
            "MakesDecisions(x) ::: x makes decisions.",
            "UnderstandsPeople(x) ::: x understands people.",
            "IsConfident(x) ::: x is confident.",
            "TakesRisks(x) ::: x takes risks.",
            "OvercomesChallenges(x) ::: x overcomes challenges.",
            "LearnsFromMistakes(x) ::: x learns from mistakes.",
            "FollowsRules(x) ::: x follows rules.",
            "HelpsOthers(x) ::: x helps others.",
            "HasIntegrity(x) ::: x has integrity."
        ]
    },
    {
        "conclusion": "If an item is both fragile and expensive, then it needs special handling.",
        "conclusion_FOL": "∀x ((Fragile(x) ∧ Expensive(x)) → NeedsSpecialHandling(x)) ::: For all x, if x is fragile and expensive, then x needs special handling.",
        "premises": [
            "All items made of glass are fragile.",
            "Every fragile item is breakable.",
            "If something is expensive, it's valuable.",
            "All valuable items are insured.",
            "If something is made of glass, it needs special handling.",
            "Some items are expensive.",
            "Some fragile items are delivered to recipients.",
            "Anything that contains a fragile item is a package.",
            "A package contains an item",
            "If something is insured, then handle it with care.",
            "Every package is an item.",
            "Every breakable item needs special handling.",
            "Something is made of glass or costs a lot.",
            "If something costs a lot, then it is expensive.",
            "All items are either expensive or not expensive."
        ],
        "premises_FOL": [
            "∀x (MadeOfGlass(x) → Fragile(x)) ::: For all x, if x is made of glass, then x is fragile.",
            "∀x (Fragile(x) → Breakable(x)) ::: For all x, if x is fragile, then x is breakable.",
            "∀x (Expensive(x) → Valuable(x)) ::: For all x, if x is expensive, then x is valuable.",
            "∀x (Valuable(x) → Insured(x)) ::: For all x, if x is valuable, then x is insured.",
            "∀x (MadeOfGlass(x) → NeedsSpecialHandling(x)) ::: For all x, if x is made of glass, then x needs special handling.",
            "∃x Expensive(x) ::: There exists an x such that x is expensive.",
            "∀x (HandleWithCare(x) → NeedsSpecialHandling(x)) ::: Anything handled with care needs special handling.",
            "∃x ∃y (Fragile(x) ∧ Delivered(x, y) ∧ Recipient(y)) ::: There exists an x and y such that x is fragile and x is delivered to y and y is a recipient.",
            "∀x ∀y ((Fragile(y) ∧ Contains(x, y)) → Package(x)) ::: For all x and y, if y is fragile and x contains y, then x is a package.",
            "∀x (Package(x) → ∃y (Contains(x,y) ∧ Item(y))) ::: For all x, there exists a y such that x is a package and x contains y and y is an item.",
            "∀x (Insured(x) → HandleWithCare(x)) ::: For all x, if x is insured, then handle x with care.",
            "∀x (Package(x) → Item(x)) ::: For all x, if x is a package, then x is an item.",
            "∀x (Breakable(x) → NeedsSpecialHandling(x)) ::: For all x, if x is breakable, then x needs special handling.",
            "∃x (MadeOfGlass(x) ∨ CostMoreThan(x, 1000)) ::: There exists an x such that x is made of glass or x costs more than 1000.",
            "∀x (CostMoreThan(x,1000) → Expensive(x)) ::: For all x, if x costs more than 1000, then x is expensive.",
            "∀x (Expensive(x) ∨ ¬Expensive(x)) ::: For all x, x is expensive or x is not expensive."
        ],
        "predicates": [
            "Fragile(x) ::: x is fragile.",
            "Expensive(x) ::: x is expensive.",
            "NeedsSpecialHandling(x) ::: x needs special handling.",
            "Item(x) ::: x is an item.",
            "MadeOfGlass(x) ::: x is made of glass.",
            "CostMoreThan(x, y) ::: x costs more than y.",
            "Price(x, y) ::: x's price is y.",
            "Material(x, y) ::: x is made of material y.",
            "HandleWithCare(x) ::: Handle x with care.",
            "Breakable(x) ::: x is breakable.",
            "Insured(x) ::: x is insured.",
            "Valuable(x) ::: x is valuable.",
            "Delivered(x, y) ::: x is delivered to y.",
            "Recipient(y) ::: y is the recipient.",
            "Contains(x, y) ::: x contains y.",
            "Package(x) ::: x is a package."
        ]
    },
    {
        "conclusion": "Some students that study hard are not lazy and will succeed in their studies.",
        "conclusion_FOL": "∃x (Student(x) ∧ StudiesHard(x) ∧ ¬IsLazy(x) ∧ Succeeds(x)) ::: There exists a student that studies hard, is not lazy, and succeeds.",
        "premises": [
            "Every student studies hard.",
            "No lazy student attends classes.",
            "Some students pass exams.",
            "Anyone who studies hard reads books.",
            "If a student reads books, then they get good grades.",
            "Every student who gets good grades enjoys learning.",
            "If someone enjoys learning, they are diligent.",
            "Some diligent students are not lazy.",
            "Anyone who is not lazy does not skip classes.",
            "If a student attends classes, they do not fail exams.",
            "Anyone who is motivated studies hard.",
            "If a student is diligent, they are motivated.",
            "Someone who gets good grades gets an award.",
            "Some people get good grades and are not lazy.",
            "If someone passes exams then they succeeds.",
            "If someone succeeds they offer help.",
            "If someone gets award, they are smart."
        ],
        "premises_FOL": [
            "∀x (Student(x) → StudiesHard(x)) ::: Every student studies hard.",
            "∀x (IsLazy(x) → ¬AttendsClasses(x)) ::: No lazy student attends classes.",
            "∃x PassesExams(x) ::: Some students pass exams.",
            "∀x (StudiesHard(x) → ReadsBooks(x)) ::: Anyone who studies hard reads books.",
            "∀x (ReadsBooks(x) → GetsGoodGrades(x)) ::: If a student reads books, then they get good grades.",
            "∀x (GetsGoodGrades(x) → EnjoysLearning(x)) ::: Every student who gets good grades enjoys learning.",
            "∀x (EnjoysLearning(x) → IsDiligent(x)) ::: If someone enjoys learning, they are diligent.",
            "∃x (IsDiligent(x) ∧ ¬IsLazy(x)) ::: Some diligent students are not lazy.",
            "∀x (¬IsLazy(x) → ¬SkipsClasses(x)) ::: Anyone who is not lazy does not skip classes.",
            "∀x (AttendsClasses(x) → ¬FailsExams(x)) ::: If a student attends classes, they do not fail exams.",
            "∀x (IsMotivated(x) → StudiesHard(x)) ::: Anyone who is motivated studies hard.",
            "∀x (IsDiligent(x) → IsMotivated(x)) ::: If a student is diligent, they are motivated.",
            "∃x (GetsGoodGrades(x) ∧ GetsAward(x)) ::: Someone who gets good grades gets an award.",
            "∃x (GetsGoodGrades(x) ∧ ¬IsLazy(x)) ::: Some people get good grades and are not lazy.",
            "∀x (PassesExams(x) → Succeeds(x)) ::: If someone passes exams then they succeeds.",
            "∀x (Succeeds(x) → OffersHelp(x, x)) ::: If someone succeeds they offer help.",
            "∀x (GetsAward(x) → IsSmart(x)) ::: If someone gets award, they are smart.",
            "∀x (GetsGoodGrades(x) → PassesExams(x)) ::: If you get good grades, you pass exams."
        ],
        "predicates": [
            "Student(x) ::: x is a student",
            "StudiesHard(x) ::: x studies hard",
            "IsLazy(x) ::: x is lazy",
            "Succeeds(x) ::: x succeeds",
            "AttendsClasses(x) ::: x attends classes",
            "PassesExams(x) ::: x passes exams",
            "ReadsBooks(x) ::: x reads books",
            "GetsGoodGrades(x) ::: x gets good grades",
            "EnjoysLearning(x) ::: x enjoys learning",
            "IsDiligent(x) ::: x is diligent",
            "SkipsClasses(x) ::: x skips classes",
            "FailsExams(x) ::: x fails exams",
            "IsMotivated(x) ::: x is motivated",
            "NeedsHelp(x) ::: x needs help",
            "OffersHelp(x, y) ::: x offers help to y",
            "IsSmart(x) ::: x is smart",
            "GetsAward(x) ::: x gets an award"
        ]
    },
    {
        "conclusion": "If someone is a doctor and works in a hospital, then they help patients.",
        "conclusion_FOL": "∀x ((Doctor(x) ∧ WorksInHospital(x)) → HelpsPatients(x)) ::: If someone is a doctor and works in a hospital, then they help patients.",
        "premises": [
            "All surgeons are doctors.",
            "All specialists are doctors.",
            "Every doctor treats illnesses.",
            "Anyone who treats illnesses uses medical equipment.",
            "Anyone who uses medical equipment prescribes medication.",
            "Everyone who prescribes medication diagnoses.",
            "Anyone who diagnoses sees patients.",
            "All who see patients work in a clinic or a hospital.",
            "Someone who conducts research is a doctor.",
            "Every doctor knows medicine.",
            "Anyone who knows medicine is educated.",
            "Everyone educated has a degree.",
            "All with a degree has a license.",
            "Anyone with a license can be a doctor.",
            "Not everyone works in a clinic.",
            "There are doctors who work in hospitals."
        ],
        "premises_FOL": [
            "∀x (Surgeon(x) → Doctor(x)) ::: All surgeons are doctors.",
            "∀x (SeesPatients(x) → HelpsPatients(x)) ::: Anyone who sees patients helps them.",
            "∀x (Specialist(x) → Doctor(x)) ::: All specialists are doctors.",
            "∀x (Doctor(x) → TreatsIllness(x)) ::: Every doctor treats illnesses.",
            "∀x (TreatsIllness(x) → UsesMedicalEquipment(x)) ::: Anyone who treats illnesses uses medical equipment.",
            "∀x (UsesMedicalEquipment(x) → PrescribesMedication(x)) ::: Anyone who uses medical equipment prescribes medication.",
            "∀x (PrescribesMedication(x) → Diagnoses(x)) ::: Everyone who prescribes medication diagnoses.",
            "∀x (Diagnoses(x) → SeesPatients(x)) ::: Anyone who diagnoses sees patients.",
            "∀x (SeesPatients(x) → (WorksInClinic(x) ∨ WorksInHospital(x))) ::: All who see patients work in a clinic or a hospital.",
            "∃x (ConductsResearch(x) ∧ Doctor(x)) ::: Someone who conducts research is a doctor.",
            "∀x (Doctor(x) → KnowsMedicine(x)) ::: Every doctor knows medicine.",
            "∀x (KnowsMedicine(x) → IsEducated(x)) ::: Anyone who knows medicine is educated.",
            "∀x (IsEducated(x) → HasDegree(x)) ::: Everyone educated has a degree.",
            "∀x (HasDegree(x) → HasLicense(x)) ::: All with a degree has a license.",
            "∀x (HasLicense(x) → Doctor(x)) ::: Anyone with a license can be a doctor.",
            "¬∀x WorksInClinic(x) ::: Not everyone works in a clinic.",
            "∃x (Doctor(x) ∧ WorksInHospital(x)) ::: There are doctors who work in hospitals.",
            "∀x (SeesPatients(x) → HelpsPatients(x)) ::: Anyone who sees patients helps them.",
            "∀x (Doctor(x) ∧ WorksInHospital(x) → SeesPatients(x)) ::: Doctors who work in hospitals see patients."
        ],
        "predicates": [
            "Doctor(x) ::: x is a doctor",
            "WorksInHospital(x) ::: x works in a hospital",
            "HelpsPatients(x) ::: x helps patients",
            "Surgeon(x) ::: x is a surgeon",
            "Specialist(x) ::: x is a specialist",
            "TreatsIllness(x) ::: x treats illness",
            "UsesMedicalEquipment(x) ::: x uses medical equipment",
            "PrescribesMedication(x) ::: x prescribes medication",
            "Diagnoses(x) ::: x diagnoses",
            "SeesPatients(x) ::: x sees patients",
            "WorksInClinic(x) ::: x works in a clinic",
            "ConductsResearch(x) ::: x conducts research",
            "KnowsMedicine(x) ::: x knows medicine",
            "IsEducated(x) ::: x is educated",
            "HasDegree(x) ::: x has a degree",
            "HasLicense(x) ::: x has a license"
        ]
    },
    {
        "conclusion": "If a student studies computer science and does well, then they will get a job.",
        "conclusion_FOL": "∀x ((Student(x) ∧ StudiesComputerScience(x) ∧ DoesWell(x)) → GetsJob(x)) ::: If a student studies computer science and does well, then they will get a job.",
        "premises": [
            "All students are enrolled.",
            "Anyone who is enrolled takes exams.",
            "Anyone who studies computer science attends lectures.",
            "Anyone who attends lectures submits assignments.",
            "Anyone who submits assignments understands concepts.",
            "Anyone who understands concepts passes exams.",
            "Anyone who passes exams gets good grades.",
            "Anyone who gets good grades does well.",
            "Anyone who does well has skills.",
            "Anyone with skills applies for jobs.",
            "Anyone who applies for jobs gets an interview.",
            "Anyone who gets an interview gets an offer.",
            "Anyone who gets an offer gets a job.",
            "Everyone who studies computer science works hard.",
            "Anyone who works hard is dedicated.",
            "Anyone who is dedicated submits assignments.",
            "Someone studies computer science.",
            "There are students."
        ],
        "premises_FOL": [
            "∀x (Student(x) → IsEnrolled(x)) ::: All students are enrolled.",
            "∀x (IsEnrolled(x) → TakesExams(x)) ::: Anyone who is enrolled takes exams.",
            "∀x (StudiesComputerScience(x) → AttendsLectures(x)) ::: Anyone who studies computer science attends lectures.",
            "∀x (AttendsLectures(x) → SubmitsAssignments(x)) ::: Anyone who attends lectures submits assignments.",
            "∀x (SubmitsAssignments(x) → UnderstandsConcepts(x)) ::: Anyone who submits assignments understands concepts.",
            "∀x (UnderstandsConcepts(x) → PassesExams(x)) ::: Anyone who understands concepts passes exams.",
            "∀x (PassesExams(x) → GetsGoodGrades(x)) ::: Anyone who passes exams gets good grades.",
            "∀x (GetsGoodGrades(x) → DoesWell(x)) ::: Anyone who gets good grades does well.",
            "∀x (DoesWell(x) → HasSkills(x)) ::: Anyone who does well has skills.",
            "∀x (HasSkills(x) → AppliesForJobs(x)) ::: Anyone with skills applies for jobs.",
            "∀x (AppliesForJobs(x) → GetsInterview(x)) ::: Anyone who applies for jobs gets an interview.",
            "∀x (GetsInterview(x) → GetsOffer(x)) ::: Anyone who gets an interview gets an offer.",
            "∀x (GetsOffer(x) → GetsJob(x)) ::: Anyone who gets an offer gets a job.",
            "∀x (StudiesComputerScience(x) → WorksHard(x)) ::: Everyone who studies computer science works hard.",
            "∀x (WorksHard(x) → IsDedicated(x)) ::: Anyone who works hard is dedicated.",
            "∀x (IsDedicated(x) → SubmitsAssignments(x)) ::: Anyone who is dedicated submits assignments.",
            "∃x StudiesComputerScience(x) ::: Someone studies computer science.",
            "∃x Student(x) ::: There are students."
        ],
        "predicates": [
            "Student(x) ::: x is a student",
            "StudiesComputerScience(x) ::: x studies computer science",
            "DoesWell(x) ::: x does well",
            "GetsJob(x) ::: x gets a job",
            "IsEnrolled(x) ::: x is enrolled",
            "TakesExams(x) ::: x takes exams",
            "AttendsLectures(x) ::: x attends lectures",
            "SubmitsAssignments(x) ::: x submits assignments",
            "UnderstandsConcepts(x) ::: x understands concepts",
            "PassesExams(x) ::: x passes exams",
            "GetsGoodGrades(x) ::: x gets good grades",
            "HasSkills(x) ::: x has skills",
            "AppliesForJobs(x) ::: x applies for jobs",
            "GetsInterview(x) ::: x gets an interview",
            "GetsOffer(x) ::: x gets an offer",
            "WorksHard(x) ::: x works hard",
            "IsDedicated(x) ::: x is dedicated"
        ]
    },
    {
        "conclusion": "If someone is a scientist and studies biology or chemistry, they will use lab equipment and generate a report.",
        "conclusion_FOL": "∀x ((Scientist(x) ∧ (StudiesBiology(x) ∨ StudiesChemistry(x))) → (UsesLabEquipment(x) ∧ GeneratesReport(x))) ::: If someone is a scientist and studies biology or chemistry, they will use lab equipment and generate a report.",
        "premises": [
            "All scientists conduct experiments.",
            "Anyone who conducts experiments analyzes data.",
            "Anyone who analyzes data generates a report.",
            "Anyone who studies biology or chemistry works in a lab.",
            "Anyone who works in a lab uses lab equipment.",
            "Scientists publish papers.",
            "Anyone who publishes papers needs funding.",
            "Scientists collaborate with others.",
            "Anyone who collaborates presents findings.",
            "Anyone who presents findings attends conferences.",
            "Anyone who attends conferences is a scientist.",
            "All who specialize in biology or chemistry understands principles.",
            "Anyone who understands principles has knowledge.",
            "Anyone who has knowledge is educated.",
            "Anyone who is educated graduates.",
            "Anyone who graduates is a researcher.",
            "All researchers are scientists.",
            "Someone studies biology or chemistry.",
            "There is a scientist."
        ],
        "premises_FOL": [
            "∀x (Scientist(x) → ConductsExperiments(x)) ::: All scientists conduct experiments.",
            "∀x (ConductsExperiments(x) → AnalyzesData(x)) ::: Anyone who conducts experiments analyzes data.",
            "∀x (AnalyzesData(x) → GeneratesReport(x)) ::: Anyone who analyzes data generates a report.",
            "∀x ((StudiesBiology(x) ∨ StudiesChemistry(x)) → WorksInLab(x)) ::: Anyone who studies biology or chemistry works in a lab.",
            "∀x (WorksInLab(x) → UsesLabEquipment(x)) ::: Anyone who works in a lab uses lab equipment.",
            "∀x (Scientist(x) → PublishesPapers(x)) ::: Scientists publish papers.",
            "∀x (PublishesPapers(x) → NeedsFunding(x)) ::: Anyone who publishes papers needs funding.",
            "∀x ∃y Collaborates(x, y) ::: Scientists collaborate with others.",
            "∀x (Collaborates(x, y) → PresentsFindings(x)) ::: Anyone who collaborates presents findings.",
            "∀x (PresentsFindings(x) → AttendsConferences(x)) ::: Anyone who presents findings attends conferences.",
            "∀x (AttendsConferences(x) → Scientist(x)) ::: Anyone who attends conferences is a scientist.",
            "∀x ((SpecializesIn(x, \"Biology\") ∨ SpecializesIn(x, \"Chemistry\")) → UnderstandsPrinciples(x)) ::: All who specialize in biology or chemistry understands principles.",
            "∀x (UnderstandsPrinciples(x) → HasKnowledge(x)) ::: Anyone who understands principles has knowledge.",
            "∀x (HasKnowledge(x) → IsEducated(x)) ::: Anyone who has knowledge is educated.",
            "∀x (IsEducated(x) → Graduates(x)) ::: Anyone who is educated graduates.",
            "∀x (Graduates(x) → IsResearcher(x)) ::: Anyone who graduates is a researcher.",
            "∀x (IsResearcher(x) → Scientist(x)) ::: All researchers are scientists.",
            "∃x (StudiesBiology(x) ∨ StudiesChemistry(x)) ::: Someone studies biology or chemistry.",
            "∃x Scientist(x) ::: There is a scientist."
        ],
        "predicates": [
            "Scientist(x) ::: x is a scientist",
            "StudiesBiology(x) ::: x studies biology",
            "StudiesChemistry(x) ::: x studies chemistry",
            "UsesLabEquipment(x) ::: x uses lab equipment",
            "GeneratesReport(x) ::: x generates a report",
            "ConductsExperiments(x) ::: x conducts experiments",
            "AnalyzesData(x) ::: x analyzes data",
            "PublishesPapers(x) ::: x publishes papers",
            "WorksInLab(x) ::: x works in a lab",
            "NeedsFunding(x) ::: x needs funding",
            "Collaborates(x, y) ::: x collaborates with y",
            "PresentsFindings(x) ::: x presents findings",
            "AttendsConferences(x) ::: x attends conferences",
            "SpecializesIn(x, y) ::: x specializes in y",
            "UnderstandsPrinciples(x) ::: x understands principles",
            "HasKnowledge(x) ::: x has knowledge",
            "IsEducated(x) ::: x is educated",
            "Graduates(x) ::: x graduates",
            "IsResearcher(x) ::: x is a researcher"
        ]
    }
]